#!/usr/bin/env python3
import subprocess
import logging
import os
import shutil
from pathlib import Path

def get_apachectl_command():
    for cmd in ['apache2ctl', 'apachectl']:
        path = shutil.which(cmd) or f"/usr/sbin/{cmd}"
        if os.path.isfile(path) and os.access(path, os.X_OK):
            return path
    raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ apachectl –∏–ª–∏ apache2ctl")

APACHECTL = get_apachectl_command()
SCRIPT_DIR = Path(__file__).resolve().parent
LOG_FILE = SCRIPT_DIR / "apache_module_check.log"

logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s %(message)s')

modules_required = {
    'log_config': True,
    'dav_': False,
    'status_module': False,
    'autoindex_module': False,
    'proxy_': False,
    'userdir': False,
    'info_module': False,
    'auth_digest_module': False,
    'auth_basic_module': False,
    'ssl_module': True,
}

mod_actions = {
    'status_module': ['a2dismod', 'status'],
    'autoindex_module': ['a2dismod', 'autoindex', '-f'],
    'auth_basic_module': ['a2dismod', 'auth_basic', '-f'],
    'ssl_module': [
        ['a2enmod', 'ssl'],
        ['a2ensite', 'default-ssl.conf']
    ],
}

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è
def check_module(mod_pattern):
    try:
        result = subprocess.run([APACHECTL, '-M'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)
        return any(mod_pattern in line for line in result.stdout.splitlines())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥—É–ª—è {mod_pattern}: {e}")
        return None

def execute_command(cmd):
    try:
        subprocess.run(cmd, check=True)
        logging.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)} ‚Äî {e}")

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö auth*/ldap –º–æ–¥—É–ª–µ–π
def disable_unused_auth_modules():
    try:
        result = subprocess.run([APACHECTL, '-M'], stdout=subprocess.PIPE, text=True)
        lines = result.stdout.splitlines()
        active_modules = [line.strip().split()[0] for line in lines if 'auth_' in line or 'ldap' in line]
        allowed_auth_modules = ['auth_basic_module', 'auth_digest_module']
        for mod in active_modules:
            if not any(allowed in mod for allowed in allowed_auth_modules):
                mod_name = mod.replace('_module', '')
                print(f"üîª –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –º–æ–¥—É–ª—è: {mod_name}")
                logging.info(f"–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ auth/ldap –º–æ–¥—É–ª—è: {mod_name}")
                execute_command(['a2dismod', mod_name])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ auth/ldap –º–æ–¥—É–ª–µ–π: {e}")

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç Apache
def check_apache_user():
    try:
        result = subprocess.run(['ps', 'axo', 'user,comm'], stdout=subprocess.PIPE, text=True)
        users = set()
        for line in result.stdout.splitlines():
            if 'apache2' in line or 'httpd' in line:
                user = line.strip().split()[0]
                users.add(user)

        if 'root' in users:
            users.discard('root')
        if len(users) == 1:
            user = users.pop()
            print(f"‚úÖ Apache —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            logging.info(f"Apache —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
        else:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã Apache –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {users}")
            logging.warning(f"–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Apache: {users}")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Apache")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Apache: {e}")

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def check_system_hardening():
    try:
        with open("/etc/passwd") as f:
            for line in f:
                if "www-data" in line and "/sbin/nologin" in line:
                    print("‚úÖ www-data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /sbin/nologin")
                    break
            else:
                print("‚ùå www-data –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /sbin/nologin")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ 2.2: {e}")

    try:
        with open("/etc/shadow") as f:
            for line in f:
                if line.startswith("www-data:"):
                    if line.split(":")[1].startswith("!"):
                        print("‚úÖ –£—á—ë—Ç–∫–∞ www-data –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
                    else:
                        print("‚ùå –£—á—ë—Ç–∫–∞ www-data –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                        execute_command(['usermod', '-L', 'www-data'])
                    break
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ 2.3: {e}")

    for path in ['/etc/apache2', '/usr/share/apache2']:
        try:
            result = subprocess.run(['find', path, '!', '-user', 'root'], stdout=subprocess.PIPE, text=True)
            if result.stdout.strip():
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –≤ {path}, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                subprocess.run(['chown', 'root:root', '-R', path])
            else:
                print(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≤ {path} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç root")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ 2.4: {e}")

    try:
        subprocess.run(['chmod', '755', '-R', '/etc/apache2'])
        print("‚úÖ –ü—Ä–∞–≤–∞ 755 –Ω–∞ /etc/apache2")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ 2.5: {e}")

    try:
        u = subprocess.run(['stat', '-c', '%U', '/var/log/apache2'], stdout=subprocess.PIPE, text=True).stdout.strip()
        g = subprocess.run(['stat', '-c', '%G', '/var/log/apache2'], stdout=subprocess.PIPE, text=True).stdout.strip()
        p = subprocess.run(['stat', '-c', '%a', '/var/log/apache2'], stdout=subprocess.PIPE, text=True).stdout.strip()
        if u != 'root' or g != 'www-data' or p != '660':
            print("‚ö†Ô∏è /var/log/apache2 –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã/–ø—Ä–∞–≤–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            subprocess.run(['chown', 'root:www-data', '-R', '/var/log/apache2'])
            subprocess.run(['chmod', '660', '-R', '/var/log/apache2'])
        else:
            print("‚úÖ /var/log/apache2 –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ 2.6: {e}")

    try:
        pidfile = '/run/apache2/apache2.pid'
        u = subprocess.run(['stat', '-c', '%U', pidfile], stdout=subprocess.PIPE, text=True).stdout.strip()
        g = subprocess.run(['stat', '-c', '%G', pidfile], stdout=subprocess.PIPE, text=True).stdout.strip()
        p = subprocess.run(['stat', '-c', '%a', pidfile], stdout=subprocess.PIPE, text=True).stdout.strip()
        if u != 'root' or g != 'root' or p != '644':
            print("‚ö†Ô∏è PID-—Ñ–∞–π–ª –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã/–ø—Ä–∞–≤–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
            subprocess.run(['chown', 'root:root', pidfile])
            subprocess.run(['chmod', '644', pidfile])
        else:
            print("‚úÖ PID-—Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ 2.8: {e}")

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ ScoreBoardFile (–ø.2.9)
def check_scoreboard_file():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ScoreBoardFile (–ø.2.9)")
    result = subprocess.run("grep -r 'ScoreBoardFile' /etc/apache2/*.conf", shell=True, stdout=subprocess.PIPE, text=True)
    if result.stdout:
        lines = result.stdout.splitlines()
        for line in lines:
            path = line.split(":")[0]
            stat_u = subprocess.run(f"stat -c %U {path}", shell=True, stdout=subprocess.PIPE, text=True).stdout.strip()
            stat_g = subprocess.run(f"stat -c %G {path}", shell=True, stdout=subprocess.PIPE, text=True).stdout.strip()
            if stat_u == "root" and stat_g == "root":
                print(f"‚úÖ ScoreBoardFile: {path} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç root:root")
            else:
                print(f"‚ùå ScoreBoardFile: {path} ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ root:root")
                subprocess.run(f"chown root:root {path}", shell=True)
    else:
        print("‚ÑπÔ∏è ScoreBoardFile –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è group
def check_group_write_perm():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è group (–ø.2.10)")
    result = subprocess.run("find /etc/apache2 -perm /g=w -ls | grep -v 'lrwxrwxrwx'", shell=True, stdout=subprocess.PIPE, text=True)
    if result.stdout:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∞ group –Ω–∞ –∑–∞–ø–∏—Å—å ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
        subprocess.run("chmod -R g-w /etc/apache2", shell=True)
    else:
        print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è group –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç—É (–ø.3.2)
def check_access_control():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç—É (–ø.3.2)")

    # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    conf_path = "/etc/apache2/apache2.conf"
    
    with open(conf_path, "r") as f:
        config = f.read()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–ª–æ–∫ <Location /portal>
    if "<Location /portal>" not in config:
        print("‚ùå –ë–ª–æ–∫ <Location /portal> –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ...")
        with open(conf_path, "a") as f:
            f.write("\n<Location /portal>\n    Require valid-user\n</Location>\n")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ <Location /portal> —Å –¥–∏—Ä–µ–∫—Ç–∏–≤–æ–π Require valid-user.")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤ –±–ª–æ–∫–µ <Location /portal> —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–±—É–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–∏–≤–∞
        if "Require valid-user" not in config.split("<Location /portal>")[1].split("</Location>")[0]:
            # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–∏–≤—É
            with open(conf_path, "a") as f:
                f.write("\n<Location /portal>\n    Require valid-user\n</Location>\n")
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Require valid-user –≤ <Location /portal>")
        else:
            print("‚ÑπÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Require valid-user —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
def remove_allow_override_list():
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã AllowOverrideList (–ø.3.3)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ AllowOverrideList –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    result = subprocess.run("grep -r 'AllowOverrideList' /etc/apache2/*.conf", shell=True, stdout=subprocess.PIPE, text=True)
    
    if result.stdout:
        print("‚ùå –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ AllowOverrideList ‚Äî —É–¥–∞–ª—è–µ–º –µ—ë...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_files = result.stdout.splitlines()
        
        for file in config_files:
            file_path = file.split(":")[0]
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å AllowOverrideList
            with open(file_path, 'r') as f:
                lines = f.readlines()
            
            with open(file_path, 'w') as f:
                for line in lines:
                    if "AllowOverrideList" not in line:
                        f.write(line)
            
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–∏–≤–∞ AllowOverrideList —É–¥–∞–ª–µ–Ω–∞ –∏–∑ {file_path}")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Apache, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É
       
    else:
        print("‚úÖ AllowOverrideList –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

# üõ† –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è AH00558
def suppress_ah00558_warning():
    try:
        # –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ServerName
        conf_path = "/etc/apache2/conf-available/servername.conf"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ServerName
        if not os.path.exists(conf_path):
            # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open(conf_path, "w") as f:
                f.write("ServerName localhost\n")
            subprocess.run(["a2enconf", "servername"], check=True)
            subprocess.run(["systemctl", "reload", "apache2"], check=True)
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ServerName localhost ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ AH00558 —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
            logging.info("ServerName localhost —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚úÖ ServerName —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ AH00558 —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ServerName localhost")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ServerName: {e}")

# üõ† –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Apache —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ systemctl
def restart_apache():
    systemctl_path = shutil.which("systemctl")  # –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ systemctl
    if systemctl_path:
        subprocess.run([systemctl_path, "restart", "apache2"], check=True)
        print("‚ÑπÔ∏è Apache –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("‚ùå systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã AllowOverrideList (–ø.3.3)

def main():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Apache –º–æ–¥—É–ª–µ–π...")
    logging.info("=== –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Apache ===")

    disable_unused_auth_modules()

    for mod, should_be_enabled in modules_required.items():
        is_enabled = check_module(mod)
        if is_enabled is None:
            continue

        status = "–≤–∫–ª—é—á—ë–Ω" if is_enabled else "–æ—Ç–∫–ª—é—á—ë–Ω"
        expected = "–≤–∫–ª—é—á—ë–Ω" if should_be_enabled else "–æ—Ç–∫–ª—é—á—ë–Ω"

        if is_enabled == should_be_enabled:
            print(f"‚úÖ {mod} —É–∂–µ {status}")
        else:
            print(f"‚ö†Ô∏è {mod} —Å–µ–π—á–∞—Å {status}, –Ω—É–∂–Ω–æ: {expected}")
            actions = mod_actions.get(mod)
            if actions:
                if isinstance(actions[0], list):
                    for act in actions:
                        execute_command(act)
                else:
                    execute_command(actions)
            else:
                cmd = ['a2enmod', mod] if should_be_enabled else ['a2dismod', mod]
                execute_command(cmd)

    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Apache (–ø.2.1)")
    check_apache_user()

    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø.2.2 ‚Äì 2.8)")
    check_system_hardening()

    # **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ 3.1-3.3**
    check_scoreboard_file()
    check_group_write_perm()
    check_access_control()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –û–°
    remove_allow_override_list()

    suppress_ah00558_warning()

    logging.info("=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥: {LOG_FILE}")
    print("‚ÑπÔ∏è –ù–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Apache –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å–¥–µ–ª–∞–ª —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    restart_apache()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Apache —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ


if __name__ == "__main__":
    main()
